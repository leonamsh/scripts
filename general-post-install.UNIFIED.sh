#!/usr/bin/env bash
# ============================================================================
#  General Post-Install (UNIFIED) — generated by ChatGPT
#  - Preserva seu script base e adiciona perfis para Arch / Fedora / Ubuntu
#  - Idempotente, com checagens e mapeamento de pacotes entre distros
#  - Pode ser executado diretamente OU 'source' a partir do seu script principal
# ============================================================================
set -euo pipefail

# ---- Core utilities ----
log()   { printf "\033[1;34m[INFO]\033[0m %s\n" "$*"; }
warn()  { printf "\033[1;33m[WARN]\033[0m %s\n" "$*"; }
err()   { printf "\033[1;31m[ERR ]\033[0m %s\n" "$*" 1>&2; }
ask()   { read -r -p "$* " REPLY; }

need_root() {
  if [[ ${EUID:-$(id -u)} -ne 0 ]]; then
    err "Este script precisa rodar com privilégios de root (sudo)."
    exit 1
  fi
}

detect_distro() {
  if command -v pacman >/dev/null 2>&1; then
    DISTRO="arch"
  elif command -v dnf >/dev/null 2>&1; then
    DISTRO="fedora"
  elif command -v apt-get >/dev/null 2>&1 || command -v apt >/dev/null 2>&1; then
    DISTRO="ubuntu"
  else
    err "Distro não reconhecida (pacman/dnf/apt)."
    exit 1
  fi
}

# Exec wrapper: mostra comando e falha claramente
run() {
  echo "+ $*"
  eval "$@"
}

# ---- Package abstractions ----
pkg_update() {
  case "$DISTRO" in
    arch)   run "pacman -Syyu --noconfirm" ;;
    fedora) run "dnf -y upgrade" ;;
    ubuntu) run "apt-get update && apt-get -y upgrade" ;;
  esac
}

pkg_install() {
  # uso: pkg_install pkg1 pkg2 ...
  local pkgs=("$@")
  case "$DISTRO" in
    arch)   run "pacman -S --noconfirm --needed ${pkgs[*]}" ;;
    fedora) run "dnf -y install ${pkgs[*]}" ;;
    ubuntu) run "apt-get -y install ${pkgs[*]}" ;;
  esac
}

pkg_group_devtools() {
  case "$DISTRO" in
    arch)   pkg_install base-devel ;;
    fedora) run "dnf -y groupinstall 'Development Tools'" ;;
    ubuntu) pkg_install build-essential ;;
  esac
}

enable_flathub() {
  if ! command -v flatpak >/dev/null 2>&1; then
    case "$DISTRO" in
      arch)   pkg_install flatpak ;;
      fedora) pkg_install flatpak ;;
      ubuntu) pkg_install flatpak ;;
    esac
  fi
  run "flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo"
}

# ---- Repo setup por distro ----
setup_repos() {
  case "$DISTRO" in
    arch)
      log "Arch: opcional - reflector/espelhos (não habilitado por padrão)."
      ;;
    fedora)
      log "Habilitando RPM Fusion (free/nonfree)"
      run "dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm"
      run "dnf -y install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"
      ;;
    ubuntu)
      log "Habilitando multiverse e i386 (útil para Steam)"
      run "add-apt-repository -y multiverse"
      run "dpkg --add-architecture i386"
      run "apt-get update"
      ;;
  esac
}

# ---- Codecs/Multimídia ----
install_codecs() {
  case "$DISTRO" in
    arch)
      pkg_install ffmpeg ;;
    fedora)
      pkg_install gstreamer1-plugins-{bad-free,good,base,ugly-free,ugly} gstreamer1-plugin-openh264                   lame-libs ffmpeg
      ;;
    ubuntu)
      pkg_install ubuntu-restricted-extras ffmpeg
      ;;
  esac
}

# ---- Steam e 32-bit Vulkan ----
install_steam() {
  case "$DISTRO" in
    arch)   pkg_install steam ;;
    fedora) pkg_install steam ;;
    ubuntu) pkg_install steam ;;
  esac

  case "$DISTRO" in
    fedora)
      # 32-bit Vulkan para jogos
      run "dnf -y install mesa-dri-drivers mesa-dri-drivers.i686 mesa-vulkan-drivers mesa-vulkan-drivers.i686"
      ;;
    ubuntu)
      # Drivers Vulkan (i386) para Proton
      run "apt-get -y install mesa-vulkan-drivers mesa-vulkan-drivers:i386"
      ;;
  esac
}

# ---- Core Dev Stack ----
install_core_dev() {
  pkg_group_devtools
  case "$DISTRO" in
    arch)
      pkg_install neovim git curl wget zsh fish nodejs npm yarn pnpm                   gcc make cmake python-pip ripgrep fzf bat fd htop btop stow unzip zip                   kitty alacritty tmux xclip wl-clipboard firefox
      ;;
    fedora)
      pkg_install neovim git curl wget zsh fish nodejs npm yarnpkg pnpm                   gcc make cmake python3-pip ripgrep fzf bat fd-find htop btop stow unzip zip                   kitty alacritty tmux xclip wl-clipboard firefox
      # Link fd-find -> fd, se necessário
      command -v fdfind >/dev/null 2>&1 && ! command -v fd >/dev/null 2>&1 && run "ln -sf $(command -v fdfind) /usr/local/bin/fd"
      ;;
    ubuntu)
      pkg_install neovim git curl wget zsh fish nodejs npm yarnpkg pnpm                   gcc make cmake python3-pip ripgrep fzf bat fd-find htop btop stow unzip zip                   kitty alacritty tmux xclip wl-clipboard firefox
      command -v fdfind >/dev/null 2>&1 && ! command -v fd >/dev/null 2>&1 && run "ln -sf $(command -v fdfind) /usr/local/bin/fd"
      ;;
  esac
}

# ---- Headers/Devel libs úteis (Python, Ruby, etc.) ----
install_lang_deps() {
  case "$DISTRO" in
    fedora)
      pkg_install openssl-devel zlib-devel bzip2-devel readline-devel sqlite-devel libffi-devel xz-devel tk-devel                   libxml2-devel libxslt-devel
      ;;
    ubuntu)
      pkg_install libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libffi-dev liblzma-dev tk-dev                   libxml2-dev libxslt1-dev
      ;;
    arch)
      # Arch geralmente resolve via base-devel + pacotes específicos on-demand
      true ;;
  esac
}

# ---- NVIDIA helper (opcional) ----
install_nvidia_if_detected() {
  if lspci | grep -qi "nvidia"; then
    warn "GPU NVIDIA detectada – instalando drivers proprietários."
    case "$DISTRO" in
      fedora)
        pkg_install akmod-nvidia xorg-x11-drv-nvidia-cuda
        # 32-bit para jogos
        pkg_install xorg-x11-drv-nvidia-libs.i686
        run "systemctl enable --now akmods"
        ;;
      ubuntu)
        if command -v ubuntu-drivers >/dev/null 2>&1; then
          run "ubuntu-drivers autoinstall"
        else
          pkg_install nvidia-driver-535 || true
        fi
        ;;
      arch)
        pkg_install nvidia nvidia-utils lib32-nvidia-utils || true
        ;;
    esac
  else
    log "Sem NVIDIA detectada – pulando drivers proprietários."
  fi
}

# ---- Docker (opcional) ----
install_docker_optional() {
  if [[ "${INSTALL_DOCKER:-0}" == "1" ]]; then
    case "$DISTRO" in
      fedora)
        # Moby Engine (Fedora) + plugin compose
        pkg_install moby-engine docker-compose-plugin
        run "systemctl enable --now docker"
        ;;
      ubuntu)
        pkg_install docker.io docker-compose-plugin
        run "systemctl enable --now docker"
        ;;
      arch)
        pkg_install docker docker-compose
        run "systemctl enable --now docker"
        ;;
    esac
    # Adiciona usuário ao grupo docker (se não root)
    if [[ ${SUDO_USER:-} ]]; then
      run "usermod -aG docker ${SUDO_USER}"
      warn "Faça logout/login para ativar o grupo docker."
    fi
  fi
}

# ---- Shell default (opcional) ----
maybe_set_default_shell() {
  local target="${DEFAULT_SHELL:-}"
  [[ -z "$target" ]] && return 0
  if command -v "$target" >/dev/null 2>&1; then
    local shpath; shpath="$(command -v "$target")"
    if [[ ${SUDO_USER:-} ]]; then
      run "chsh -s $shpath ${SUDO_USER}"
    else
      run "chsh -s $shpath"
    fi
  else
    warn "Shell '$target' não encontrado, ignorando."
  fi
}

# ---- Gaming tweaks (opcional) ----
install_gaming_optional() {
  if [[ "${INSTALL_GAMING_EXTRAS:-1}" == "1" ]]; then
    case "$DISTRO" in
      fedora) pkg_install gamemode goverlay mangohud protontricks || true ;;
      ubuntu) pkg_install gamemode goverlay mangohud protontricks || true ;;
      arch)   pkg_install gamemode goverlay mangohud protontricks || true ;;
    esac
  fi
}

# ---- Perfis completos por distro ----
profile_arch() {
  pkg_update
  setup_repos
  enable_flathub
  install_codecs
  install_core_dev
  install_lang_deps
  install_steam
  install_gaming_optional
  install_nvidia_if_detected
  install_docker_optional
  maybe_set_default_shell
}

profile_fedora() {
  pkg_update
  setup_repos
  enable_flathub
  install_codecs
  install_core_dev
  install_lang_deps
  install_steam
  install_gaming_optional
  install_nvidia_if_detected
  install_docker_optional
  maybe_set_default_shell
}

profile_ubuntu() {
  pkg_update
  setup_repos
  enable_flathub
  install_codecs
  install_core_dev
  install_lang_deps
  install_steam
  install_gaming_optional
  install_nvidia_if_detected
  install_docker_optional
  maybe_set_default_shell
}

# ---- Menu interativo (se quiser) ----
show_menu() {
  echo
  echo "-----------------------------------------------------"
  echo " Bem-vindo ao script de pós-instalação (UNIFIED)!"
  echo "-----------------------------------------------------"
  echo "1) Arch Linux"
  echo "2) Fedora Workstation"
  echo "3) Ubuntu/Debian-based"
  echo "4) Detectar automaticamente"
  echo "5) Sair"
  echo "-----------------------------------------------------"
}

main() {
  need_root

  local choice="${CHOICE:-}"
  if [[ -z "${choice}" ]]; then
    show_menu
    read -rp "Escolha: " choice
  fi

  case "$choice" in
    1|"arch")
      DISTRO="arch"
      ;;
    2|"fedora")
      DISTRO="fedora"
      ;;
    3|"ubuntu"|"debian")
      DISTRO="ubuntu"
      ;;
    4|"auto"|"detect")
      detect_distro
      ;;
    5|"sair"|"exit"|"quit")
      echo "Saindo."
      exit 0
      ;;
    *)
      warn "Opção inválida. Tentando detecção automática..."
      detect_distro
      ;;
  esac

  log "Distro selecionada: $DISTRO"

  # Variáveis opcionais que você pode exportar antes de rodar:
  #   INSTALL_DOCKER=1            # instala e habilita Docker
  #   DEFAULT_SHELL=zsh|fish|bash # troca shell padrão do usuário
  #   INSTALL_GAMING_EXTRAS=0     # desabilita extras de jogos
  profile_${DISTRO}

  log "Concluído com sucesso para: $DISTRO"
}

# Executa main apenas se script for chamado diretamente (não 'sourced')
# shellcheck disable=SC2296
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi

# ================== Fim do bloco UNIFIED ==================


# ======= CONTEÚDO ORIGINAL DO SEU SCRIPT (preservado) =======
# (shebang original mantido abaixo)
#!/bin/bash
clear

# Function to display a welcome message and distribution choice
show_welcome_and_choice() {
    echo -e "\n-----------------------------------------------------"
    echo -e "         Bem-vindo ao script de pós-instalação!"
    echo -e "-----------------------------------------------------"
    echo -e "\nPara qual sistema operacional você gostaria de instalar?"
    echo -e "1) Arch Linux"
    echo -e "2) Fedora Workstation"
    echo -e "3) Ubuntu/Debian-based"
    echo -e "4) Sair"
    echo -e "-----------------------------------------------------"
}

# Function for Arch Linux installation and configuration
install_arch() {
    echo -e "\n#-------------------- INICIANDO INSTALAÇÃO/PÓS-INSTALAÇÃO (ARCH LINUX) --------------------#\n"
    sleep 1

    echo -e "\n[+] Atualizando sistema...\n"
    sudo pacman -Syyu --noconfirm

    echo -e "\n[+] Instalando pacotes essenciais...\n"
    sudo pacman -S --noconfirm --needed \
        curl unzip git jq base-devel \
        ntfs-3g gedit emacs \
        ttf-fira-code ttf-jetbrains-mono ttf-ubuntu-font-family \
        alacritty vlc steam lutris goverlay \
        pcmanfm-gtk3 thunar feh wlogout numlockx \
        gvfs dosbox samba xfce4-power-manager lxappearance flameshot \
        fzf-zsh-plugin zsh-autosuggestions zsh-completions zsh-syntax-highlighting \
        ttf-space-mono-nerd ttf-iosevka-nerd ttf-inconsolata-nerd ttf-jetbrains-mono-nerd \
        neovim nodejs python picom rofi dmenu

    echo -e "\n[+] Instalando bibliotecas para Wine/Gaming...\n"
    sudo pacman -S --noconfirm --needed \
        wine winetricks wine-mono wine_gecko \
        vulkan-icd-loader lib32-vulkan-icd-loader vkd3d lib32-vkd3d \
        lib32-giflib lib32-gnutls lib32-v4l-utils lib32-libpulse \
        lib32-alsa-lib lib32-libxcomposite lib32-libxinerama \
        lib32-opencl-icd-loader lib32-gst-plugins-base-libs lib32-sdl2 \
        mesa lib32-mesa vulkan-radeon lib32-vulkan-radeon \
        libva-utils

    echo -e "\n[+] Instalando suporte Flatpak...\n"
    sudo pacman -S --noconfirm --needed flatpak
    sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    flatpak install -y flathub \
        net.davidotek.pupgui2 \
        com.spotify.Client \
        com.mattjakeman.ExtensionManager

    echo -e "\n[+] Instalando suporte AUR...\n"
    if ! command -v paru &>/dev/null; then
        echo "[+] Instalando 'paru' via pamac (se disponível) ou manualmente..."
        # Trying pamac first, if it's installed. Otherwise, guide manual installation.
        if command -v pamac &>/dev/null; then
            pamac install paru --no-confirm || echo "[!] Falha ao instalar paru via pamac. Verifique se pamac está instalado ou instale manualmente."
        else yay -S paru --noconfirm
            echo "pamac não encontrado. Instale paru manualmente ou adicione o método de instalação de paru aqui (e.g., git clone e makepkg)."
            echo "Exemplo para paru (requer base-devel):"
            echo "git clone https://aur.archlinux.org/paru.git"
            echo "cd paru"
            echo "makepkg -si"
            echo "cd .."
            echo "rm -rf paru"
        fi
    fi

    # Using paru for AUR packages if paru is installed
    if command -v paru &>/dev/null; then
        paru -S --noconfirm --needed \
            visual-studio-code-bin qtile-extras
        # paru -S firefox-nightly-bin firefox-nightly-i18n-pt-br --noconfirm --needed
    else
        echo "[!] 'paru' não está instalado. Pulando a instalação de pacotes AUR (VS Code, qtile-extras)."
        echo "Você precisará instalar visual-studio-code e qtile-extras manualmente se desejar."
    fi

    echo -e "\n[+] Configurando Oh-My-Zsh e plugins...\n"
    # Oh-My-Zsh base installation (if not already installed)
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        echo "Instalando Oh-My-Zsh..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    fi

    # Zsh plugins
    git clone https://github.com/unixorn/fzf-zsh-plugin ~/.oh-my-zsh/custom/plugins/fzf-zsh-plugin || echo "fzf-zsh-plugin already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions || echo "zsh-autosuggestions already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-completions || echo "zsh-completions already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting || echo "zsh-syntax-highlighting already exists, skipping clone."

    # fzf (if not installed via pacman or prefer git version)
    # The pacman version is preferred, but including the git clone for completeness if desired.
    # if ! command -v fzf &>/dev/null; then
    #    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    #    ~/.fzf/install
    # fi

    echo -e "\n[+] Configurando Git...\n"
    read -rep "Digite seu email para Git: " git_email
    read -rep "Digite seu nome para Git: " git_name
    git config --global user.email "${git_email}"
    git config --global user.name "${git_name}"

    echo -e "\n[+] Finalizando...\n"
    sudo systemctl restart systemd-binfmt
    sudo pacman -Syu --noconfirm

    echo -e "\n✅ Pós-instalação para Arch Linux concluída com sucesso!\n"
}

# Function for Fedora Workstation installation and configuration
install_fedora() {
    echo -e "\n#-------------------- INICIANDO INSTALAÇÃO/PÓS-INSTALAÇÃO (FEDORA WORKSTATION) --------------------#\n"
    sleep 1

    echo -e "\n[+] Atualizando sistema...\n"
    sudo dnf update -y

    echo -e "\n[+] Instalando pacotes essenciais...\n"
    sudo dnf install -y \
        curl unzip git jq @development-tools \
        ntfs-3g gedit emacs \
        fira-code-fonts jetbrains-mono-fonts-all ubuntu-fonts-family \
        alacritty vlc steam lutris goverlay \
        pcmanfm-gtk3 thunar feh wlogout numlockx \
        gvfs dosbox samba xfce4-power-manager lxappearance flameshot \
        fzf neovim nodejs python3 picom rofi dmenu

    echo -e "\n[+] Instalando bibliotecas para Wine/Gaming...\n"
    sudo dnf install -y \
        wine winetricks wine-mono wine-gecko \
        vulkan-loader vulkan-tools \
        mesa-libGL.i686 mesa-vulkan-drivers.i686 \
        giflib.i686 gnutls.i686 v4l-utils.i686 pulseaudio-libs.i686 \
        alsa-lib.i686 libXcomposite.i686 libXinerama.i686 \
        opencl-headers.i686 gstreamer1-plugins-base.i686 SDL2.i686 \
        mesa-dri-drivers mesa-vulkan-drivers \
        vulkan-radeon.i686 # Add this for AMD if needed

    echo -e "\n[+] Instalando suporte Flatpak...\n"
    sudo dnf install -y flatpak
    sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    flatpak install -y flathub \
        net.davidotek.pupgui2 \
        com.spotify.Client \
        com.mattjakeman.ExtensionManager

    echo -e "\n[+] Instalando pacotes adicionais (VS Code, qtile-extras)...\n"
    # Visual Studio Code:
    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
    sudo dnf check-update
    sudo dnf install -y code

    # qtile-extras: Check if available in Fedora repos, otherwise use pip
    if ! sudo dnf install -y qtile-extras &>/dev/null; then
        echo "qtile-extras não encontrado nos repositórios DNF. Tentando via pip..."
        sudo dnf install -y python3-pip
        pip install --user qtile-extras # Install for current user
    fi

    echo -e "\n[+] Configurando Oh-My-Zsh e plugins...\n"
    # Oh-My-Zsh base installation (if not already installed)
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        echo "Instalando Oh-My-Zsh..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    fi

    # Zsh plugins
    git clone https://github.com/unixorn/fzf-zsh-plugin ~/.oh-my-zsh/custom/plugins/fzf-zsh-plugin || echo "fzf-zsh-plugin already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions || echo "zsh-autosuggestions already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-completions || echo "zsh-completions already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting || echo "zsh-syntax-highlighting already exists, skipping clone."

    echo -e "\n[+] Configurando Git...\n"
    read -rep "Digite seu email para Git: " git_email
    read -rep "Digite seu nome para Git: " git_name
    git config --global user.email "${git_email}"
    git config --global user.name "${git_name}"

    echo -e "\n[+] Finalizando...\n"
    sudo dnf update -y

    echo -e "\n✅ Pós-instalação para Fedora Workstation concluída com sucesso!\n"
}

# Function for Ubuntu/Debian-based installation and configuration
install_ubuntu() {
    echo -e "\n#-------------------- INICIANDO INSTALAÇÃO/PÓS-INSTALAÇÃO (UBUNTU/DEBIAN) --------------------#\n"
    sleep 1

    echo -e "\n[+] Atualizando sistema...\n"
    sudo apt update && sudo apt upgrade -y

    echo -e "\n[+] Instalando pacotes essenciais...\n"
    sudo apt install -y \
        curl unzip git jq build-essential \
        ntfs-3g gedit emacs \
        fonts-firacode fonts-jetbrains-mono fonts-ubuntu \
        alacritty vlc steam lutris goverlay \
        pcmanfm thunar feh wlogout numlockx \
        gvfs dosbox samba xfce4-power-manager lxappearance flameshot \
        fzf neovim nodejs npm python3 python3-pip picom rofi dmenu

    echo -e "\n[+] Instalando bibliotecas para Wine/Gaming...\n"
    # Add architecture for 32-bit packages
    sudo dpkg --add-architecture i386
    sudo apt update
    sudo apt install -y \
        wine-installer winetricks wine-mono wine-gecko \
        libvulkan1 libvulkan1:i386 vulkan-tools \
        libglx-mesa0:i386 libgl1-mesa-dri:i386 \
        libgif7:i386 libgnutls30:i386 libv4l-0:i386 libpulse0:i386 \
        libasound2:i386 libxcomposite1:i386 libxinerama1:i386 \
        libopencl1:i386 libgstreamer-plugins-base1.0-0:i386 libsdl2-2.0-0:i386 \
        mesa-vulkan-drivers mesa-vulkan-drivers:i386 \
        libva-utils

    echo -e "\n[+] Instalando suporte Flatpak...\n"
    sudo apt install -y flatpak
    sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    flatpak install -y flathub \
        net.davidotek.pupgui2 \
        com.spotify.Client \
        com.mattjakeman.ExtensionManager

    echo -e "\n[+] Instalando pacotes adicionais (VS Code, qtile-extras)...\n"
    # Visual Studio Code:
    sudo apt install -y software-properties-common apt-transport-https wget
    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
    sudo apt update
    sudo apt install -y code

    # qtile-extras:
    # Most likely via pip on Ubuntu
    pip install --user qtile-extras # Install for current user

    echo -e "\n[+] Configurando Oh-My-Zsh e plugins...\n"
    # Oh-My-Zsh base installation (if not already installed)
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        echo "Instalando Oh-My-Zsh..."
        sudo apt install -y zsh # Ensure zsh is installed first
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    fi

    # Zsh plugins
    git clone https://github.com/unixorn/fzf-zsh-plugin ~/.oh-my-zsh/custom/plugins/fzf-zsh-plugin || echo "fzf-zsh-plugin already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions || echo "zsh-autosuggestions already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-completions || echo "zsh-completions already exists, skipping clone."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting || echo "zsh-syntax-highlighting already exists, skipping clone."

    echo -e "\n[+] Configurando Git...\n"
    read -rep "Digite seu email para Git: " git_email
    read -rep "Digite seu nome para Git: " git_name
    git config --global user.email "${git_email}"
    git config --global user.name "${git_name}"

    echo -e "\n[+] Finalizando...\n"
    sudo apt update && sudo apt upgrade -y

    echo -e "\n✅ Pós-instalação para Ubuntu/Debian concluída com sucesso!\n"
}

# Main script logic
while true; do
    show_welcome_and_choice
    read -rp "Digite sua escolha (1-4): " choice

    case $choice in
        1)
            install_arch
            break
            ;;
        2)
            install_fedora
            break
            ;;
        3)
            install_ubuntu
            break
            ;;
        4)
            echo -e "\nSaindo do script. Adeus!\n"
            exit 0
            ;;
        *)
            echo -e "\nEscolha inválida. Por favor, digite 1, 2, 3 ou 4.\n"
            sleep 2
            clear
            ;;
    esac
done
